import { createClient } from 'https://esm.sh/@supabase/supabase-js@2';

const TELEGRAM_BOT_TOKEN = Deno.env.get('TELEGRAM_BOT_TOKEN');
const SUPABASE_URL = Deno.env.get('SUPABASE_URL');
const SUPABASE_SERVICE_ROLE_KEY = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY');

const supabase = createClient(SUPABASE_URL!, SUPABASE_SERVICE_ROLE_KEY!);

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

async function sendTelegramMessage(chatId: number, text: string, keyboard?: any) {
  const url = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;

  const body: any = {
    chat_id: chatId,
    text: text,
    parse_mode: 'HTML',
  };

  if (keyboard) {
    body.reply_markup = keyboard;
  }

  const response = await fetch(url, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(body),
  });

  return await response.json();
}

function getMainKeyboard() {
  return {
    keyboard: [
      [{ text: 'üí∞ –§–∏–Ω–∞–Ω—Å—ã' }, { text: 'üìä –û—Ç—á—ë—Ç—ã' }],
      [{ text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏' }]
    ],
    resize_keyboard: true,
    one_time_keyboard: false
  };
}

Deno.serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const authHeader = req.headers.get('Authorization');
    if (!authHeader) {
      throw new Error('–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
    }

    // Verify user
    const supabaseClient = createClient(SUPABASE_URL!, Deno.env.get('SUPABASE_ANON_KEY')!, {
      global: { headers: { Authorization: authHeader } },
    });

    const { data: { user }, error: userError } = await supabaseClient.auth.getUser();
    if (userError || !user) {
      throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    }

    // Get telegram_id for this user
    const { data: telegramUser, error: telegramError } = await supabase
      .from('telegram_users')
      .select('telegram_id')
      .eq('user_id', user.id)
      .maybeSingle();

    if (telegramError || !telegramUser) {
      throw new Error('Telegram –Ω–µ —Å–≤—è–∑–∞–Ω —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º');
    }

    // Send welcome message with quick guide
    await sendTelegramMessage(
      telegramUser.telegram_id,
      `üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CrystalBudget!</b>\n\n` +
      `–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏ –ø—Ä—è–º–æ –∏–∑ Telegram!\n\n` +
      `<b>üì± –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç:</b>\n\n` +
      `üí∞ <b>–§–∏–Ω–∞–Ω—Å—ã</b>\n` +
      `‚Ä¢ –ë—ã—Å—Ç—Ä–æ –¥–æ–±–∞–≤–ª—è–π—Ç–µ –¥–æ—Ö–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã\n` +
      `‚Ä¢ –°–∫–∞–Ω–∏—Ä—É–π—Ç–µ —á–µ–∫–∏ —Å –ø–æ–º–æ—â—å—é AI\n` +
      `‚Ä¢ –ì–æ–≤–æ—Ä–∏—Ç–µ –≥–æ–ª–æ—Å–æ–º: "–ö—É–ø–∏–ª –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–∞ 500 —Ä—É–±–ª–µ–π"\n\n` +
      `üìä <b>–û—Ç—á—ë—Ç—ã</b>\n` +
      `‚Ä¢ –°–º–æ—Ç—Ä–∏—Ç–µ –±–∞–ª–∞–Ω—Å –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏\n` +
      `‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤\n` +
      `‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–æ—Ö–æ–¥–∞\n\n` +
      `‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n` +
      `‚Ä¢ –ü–æ–ª—É—á–∏—Ç–µ –ø–æ–º–æ—â—å –ø–æ –±–æ—Ç—É\n\n` +
      `üí° <b>–°–æ–≤–µ—Ç:</b> –°–æ–∑–¥–∞–π—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–æ—Ö–æ–¥–∞ –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏, –∞ –∑–∞—Ç–µ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ—Ç–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π!\n\n` +
      `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –Ω–∏–∂–µ üëá`,
      getMainKeyboard()
    );

    // Mark welcome as sent
    await supabase
      .from('telegram_users')
      .update({ welcome_sent: true })
      .eq('telegram_id', telegramUser.telegram_id);

    return new Response(
      JSON.stringify({ success: true }),
      {
        status: 200,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      }
    );

  } catch (error) {
    console.error('Error sending notification:', error);
    return new Response(
      JSON.stringify({
        error: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'
      }),
      {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      }
    );
  }
});
