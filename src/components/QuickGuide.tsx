import { useState } from "react";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Progress } from "@/components/ui/progress";
import { Sparkles, Wallet, FolderOpen, Link2, CheckCircle2, Plus } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { supabase } from "@/integrations/supabase/client";
import { handleNumericInput } from "@/lib/numberInput";

interface QuickGuideProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  onComplete: () => void;
  userId: string;
}

const CATEGORY_PRESETS = [
  { icon: "üè†", name: "–ñ–∏–ª—å–µ" },
  { icon: "üçï", name: "–ü–∏—Ç–∞–Ω–∏–µ" },
  { icon: "üöó", name: "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç" },
  { icon: "üéÆ", name: "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è" },
  { icon: "üëï", name: "–û–¥–µ–∂–¥–∞" },
  { icon: "üíä", name: "–ó–¥–æ—Ä–æ–≤—å–µ" },
];

export function QuickGuide({ open, onOpenChange, onComplete, userId }: QuickGuideProps) {
  const [step, setStep] = useState(1);
  const { toast } = useToast();
  const [loading, setLoading] = useState(false);

  // Income source data
  const [sourceName, setSourceName] = useState("");
  const [sourceFrequency, setSourceFrequency] = useState<string>("monthly");
  const [createdSourceId, setCreatedSourceId] = useState<string>("");
  const [incomeAmount, setIncomeAmount] = useState("");
  const [incomeDate, setIncomeDate] = useState(new Date().toISOString().split('T')[0]);

  // Categories data
  const [selectedCategories, setSelectedCategories] = useState<Set<number>>(new Set());
  const [categoryAllocations, setCategoryAllocations] = useState<Record<number, { value: string; type: 'percent' | 'amount' }>>({});

  const totalSteps = 6;
  const progress = (step / totalSteps) * 100;

  const handleCreateSource = async () => {
    if (!sourceName.trim()) {
      toast({
        title: "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª–µ",
        description: "–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–æ—Ö–æ–¥–∞",
        variant: "destructive",
      });
      return;
    }

    setLoading(true);
    try {
      const { data, error } = await supabase
        .from('income_sources')
        .insert({
          user_id: userId,
          name: sourceName,
          frequency: sourceFrequency,
          color: '#10b981',
        })
        .select()
        .single();

      if (error) throw error;

      setCreatedSourceId(data.id);
      toast({
        title: "–ò—Å—Ç–æ—á–Ω–∏–∫ —Å–æ–∑–¥–∞–Ω!",
        description: `${sourceName} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω`,
      });
      setStep(3);
    } catch (error: any) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: error.message,
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  const handleAddIncome = async () => {
    if (!incomeAmount) {
      toast({
        title: "–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É",
        description: "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞",
        variant: "destructive",
      });
      return;
    }

    setLoading(true);
    try {
      const { error } = await supabase
        .from('incomes')
        .insert({
          user_id: userId,
          source_id: createdSourceId,
          amount: Number(incomeAmount),
          date: incomeDate,
        });

      if (error) throw error;

      toast({
        title: "–î–æ—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω!",
        description: `${incomeAmount} –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫ –∏—Å—Ç–æ—á–Ω–∏–∫—É`,
      });
      setStep(4);
    } catch (error: any) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: error.message,
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  const handleToggleCategory = (index: number) => {
    const newSelected = new Set(selectedCategories);
    if (newSelected.has(index)) {
      newSelected.delete(index);
      const newAllocations = { ...categoryAllocations };
      delete newAllocations[index];
      setCategoryAllocations(newAllocations);
    } else {
      newSelected.add(index);
    }
    setSelectedCategories(newSelected);
  };

  const handleAllocationChange = (index: number, value: string, type: 'percent' | 'amount') => {
    setCategoryAllocations({
      ...categoryAllocations,
      [index]: { value, type },
    });
  };

  const handleCreateCategories = async () => {
    if (selectedCategories.size === 0) {
      toast({
        title: "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
        description: "–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é",
        variant: "destructive",
      });
      return;
    }

    setLoading(true);
    try {
      // Create categories
      const categoriesToCreate = Array.from(selectedCategories).map(index => ({
        user_id: userId,
        name: CATEGORY_PRESETS[index].name,
        icon: CATEGORY_PRESETS[index].icon,
      }));

      const { data: createdCategories, error: categoriesError } = await supabase
        .from('categories')
        .insert(categoriesToCreate)
        .select();

      if (categoriesError) throw categoriesError;

      toast({
        title: "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã!",
        description: `–°–æ–∑–¥–∞–Ω–æ ${selectedCategories.size} –∫–∞—Ç–µ–≥–æ—Ä–∏–π`,
      });
      setStep(5);
    } catch (error: any) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: error.message,
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  const handleLinkCategories = async () => {
    const hasAllocations = Object.keys(categoryAllocations).length > 0;
    
    if (!hasAllocations) {
      toast({
        title: "–£–∫–∞–∂–∏—Ç–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ",
        description: "–ó–∞–¥–∞–π—Ç–µ —Å—É–º–º—É –∏–ª–∏ –ø—Ä–æ—Ü–µ–Ω—Ç —Ö–æ—Ç—è –±—ã –¥–ª—è –æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
        variant: "destructive",
      });
      return;
    }

    setLoading(true);
    try {
      // Get created categories
      const { data: categories, error: fetchError } = await supabase
        .from('categories')
        .select('id, name')
        .eq('user_id', userId)
        .order('created_at', { ascending: false })
        .limit(selectedCategories.size);

      if (fetchError) throw fetchError;

      // Create allocations
      const allocations = Array.from(selectedCategories)
        .filter(index => categoryAllocations[index])
        .map((index, i) => {
          const category = categories[i];
          const allocation = categoryAllocations[index];
          return {
            category_id: category.id,
            income_source_id: createdSourceId,
            allocation_type: allocation.type,
            allocation_value: Number(allocation.value),
          };
        });

      const { error: allocError } = await supabase
        .from('category_allocations')
        .insert(allocations);

      if (allocError) throw allocError;

      toast({
        title: "–°–≤—è–∑—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!",
        description: "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ø–µ—à–Ω–æ —Å–≤—è–∑–∞–Ω—ã —Å –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º –¥–æ—Ö–æ–¥–∞",
      });
      setStep(6);
    } catch (error: any) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: error.message,
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  const handleComplete = () => {
    onComplete();
    onOpenChange(false);
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-[600px]">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2 text-xl">
            <Sparkles className="h-5 w-5 text-primary" />
            –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç
          </DialogTitle>
          <DialogDescription>
            –®–∞–≥ {step} –∏–∑ {totalSteps}
          </DialogDescription>
        </DialogHeader>

        <Progress value={progress} className="mb-4" />

        {step === 1 && (
          <div className="space-y-4">
            <div>
              <h3 className="font-semibold text-lg mb-3">–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CrystalBudget! üíé</h3>
              <div className="bg-muted/50 rounded-lg p-4 space-y-3 text-sm">
                <p className="text-muted-foreground">
                  CrystalBudget ‚Äî —ç—Ç–æ —É–º–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∏—á–Ω—ã–º–∏ —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏.
                </p>
                <div className="space-y-2">
                  <p className="font-medium">–û—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:</p>
                  <ul className="list-disc list-inside space-y-1 text-muted-foreground ml-2">
                    <li><span className="font-medium">–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–æ—Ö–æ–¥–∞</span> ‚Äî —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏ —Ñ–∏–∫—Å–∏—Ä—É–π—Ç–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –¥–µ–Ω–µ–≥</li>
                    <li><span className="font-medium">–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤</span> ‚Äî –≥—Ä—É–ø–ø–∏—Ä—É–π—Ç–µ —Ç—Ä–∞—Ç—ã –∏ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–π—Ç–µ –±—é–¥–∂–µ—Ç</li>
                    <li><span className="font-medium">–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞</span> ‚Äî –ø—Ä–∏–≤—è–∑—ã–≤–∞–π—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º –∏ –∑–∞–¥–∞–≤–∞–π—Ç–µ –ª–∏–º–∏—Ç—ã</li>
                    <li><span className="font-medium">–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</span> ‚Äî —Å–º–æ—Ç—Ä–∏—Ç–µ –æ—Å—Ç–∞—Ç–∫–∏ –∏ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç–µ –∏—Ö –º–µ–∂–¥—É –º–µ—Å—è—Ü–∞–º–∏</li>
                    <li><span className="font-medium">–ê–Ω–∞–ª–∏—Ç–∏–∫–∞</span> ‚Äî –≥—Ä–∞—Ñ–∏–∫–∏ –∏ –æ—Ç—á–µ—Ç—ã –ø–æ –≤–∞—à–∏–º —Ñ–∏–Ω–∞–Ω—Å–∞–º</li>
                    <li><span className="font-medium">Telegram –±–æ—Ç</span> ‚Äî –¥–æ–±–∞–≤–ª—è–π—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏ —Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ —á–µ–∫–∏ –ø—Ä—è–º–æ –∏–∑ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞ ü§ñ</li>
                  </ul>
                </div>
              </div>
            </div>
            <div className="flex gap-2 pt-2">
              <Button variant="outline" onClick={() => onOpenChange(false)} className="flex-1">
                –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å
              </Button>
              <Button onClick={() => setStep(2)} className="flex-1">
                –ù–∞—á–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É
              </Button>
            </div>
          </div>
        )}

        {step === 2 && (
          <div className="space-y-4">
            <div className="flex items-center gap-2 text-primary mb-2">
              <Wallet className="h-5 w-5" />
              <h3 className="font-semibold">–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–æ—Ö–æ–¥–∞</h3>
            </div>
            <p className="text-sm text-muted-foreground mb-4">
              –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–æ—Ö–æ–¥–∞ - —ç—Ç–æ –æ—Ç–∫—É–¥–∞ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –¥–µ–Ω—å–≥–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–∞—Ä–ø–ª–∞—Ç–∞, —Ñ—Ä–∏–ª–∞–Ω—Å, –±–∏–∑–Ω–µ—Å)
            </p>
            <div className="space-y-3">
              <div>
                <Label htmlFor="source-name">–ù–∞–∑–≤–∞–Ω–∏–µ</Label>
                <Input
                  id="source-name"
                  placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ó–∞—Ä–ø–ª–∞—Ç–∞"
                  value={sourceName}
                  onChange={(e) => setSourceName(e.target.value)}
                />
              </div>
              <div>
                <Label htmlFor="source-frequency">–ß–∞—Å—Ç–æ—Ç–∞</Label>
                <Select value={sourceFrequency} onValueChange={setSourceFrequency}>
                  <SelectTrigger id="source-frequency">
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="monthly">–ï–∂–µ–º–µ—Å—è—á–Ω–æ</SelectItem>
                    <SelectItem value="weekly">–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ</SelectItem>
                    <SelectItem value="once">–†–∞–∑–æ–≤–æ</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>
            <div className="flex gap-2 pt-4">
              <Button variant="outline" onClick={() => setStep(1)} className="flex-1">
                –ù–∞–∑–∞–¥
              </Button>
              <Button onClick={handleCreateSource} disabled={loading} className="flex-1">
                –î–∞–ª–µ–µ
              </Button>
            </div>
          </div>
        )}

        {step === 3 && (
          <div className="space-y-4">
            <div className="flex items-center gap-2 text-primary mb-2">
              <Plus className="h-5 w-5" />
              <h3 className="font-semibold">–î–æ–±–∞–≤—å—Ç–µ –¥–æ—Ö–æ–¥ –≤ –∏—Å—Ç–æ—á–Ω–∏–∫</h3>
            </div>
            <p className="text-sm text-muted-foreground mb-4">
              –£–∫–∞–∂–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥ –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ "{sourceName}"
            </p>
            <div className="space-y-3">
              <div>
                <Label htmlFor="income-amount">–°—É–º–º–∞</Label>
                <Input
                  id="income-amount"
                  inputMode="decimal"
                  placeholder="50000"
                  value={incomeAmount}
                  onChange={(e) => handleNumericInput(e.target.value, setIncomeAmount)}
                />
              </div>
              <div>
                <Label htmlFor="income-date">–î–∞—Ç–∞</Label>
                <Input
                  id="income-date"
                  type="date"
                  value={incomeDate}
                  onChange={(e) => setIncomeDate(e.target.value)}
                />
              </div>
            </div>
            <div className="flex gap-2 pt-4">
              <Button variant="outline" onClick={() => setStep(2)} className="flex-1">
                –ù–∞–∑–∞–¥
              </Button>
              <Button onClick={handleAddIncome} disabled={loading} className="flex-1">
                –î–∞–ª–µ–µ
              </Button>
            </div>
          </div>
        )}

        {step === 4 && (
          <div className="space-y-4">
            <div className="flex items-center gap-2 text-primary mb-2">
              <FolderOpen className="h-5 w-5" />
              <h3 className="font-semibold">–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤</h3>
            </div>
            <p className="text-sm text-muted-foreground mb-4">
              –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–º–æ–≥—É—Ç –≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –Ω–∞ —á—Ç–æ –≤—ã —Ç—Ä–∞—Ç–∏—Ç–µ –¥–µ–Ω—å–≥–∏
            </p>
            <div className="grid grid-cols-2 gap-2">
              {CATEGORY_PRESETS.map((preset, index) => (
                <Button
                  key={index}
                  variant={selectedCategories.has(index) ? "default" : "outline"}
                  className="h-auto py-3 justify-start"
                  onClick={() => handleToggleCategory(index)}
                >
                  <span className="text-2xl mr-2">{preset.icon}</span>
                  <span>{preset.name}</span>
                </Button>
              ))}
            </div>
            <div className="flex gap-2 pt-4">
              <Button variant="outline" onClick={() => setStep(3)} className="flex-1">
                –ù–∞–∑–∞–¥
              </Button>
              <Button onClick={handleCreateCategories} disabled={loading} className="flex-1">
                –î–∞–ª–µ–µ
              </Button>
            </div>
          </div>
        )}

        {step === 5 && (
          <div className="space-y-4">
            <div className="flex items-center gap-2 text-primary mb-2">
              <Link2 className="h-5 w-5" />
              <h3 className="font-semibold">–†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –±—é–¥–∂–µ—Ç</h3>
            </div>
            <p className="text-sm text-muted-foreground mb-4">
              –£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –∏–ª–∏ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—É–º–º—É –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ "{sourceName}"
            </p>
            <div className="space-y-3 max-h-[300px] overflow-y-auto">
              {Array.from(selectedCategories).map(index => {
                const allocation = categoryAllocations[index];
                const allocationType = allocation?.type || 'percent';
                
                return (
                  <div key={index} className="space-y-2 p-3 border rounded-lg">
                    <div className="flex items-center gap-2">
                      <span className="text-2xl">{CATEGORY_PRESETS[index].icon}</span>
                      <span className="flex-1 font-medium">{CATEGORY_PRESETS[index].name}</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <Select 
                        value={allocationType} 
                        onValueChange={(value: 'percent' | 'amount') => {
                          handleAllocationChange(index, allocation?.value || "", value);
                        }}
                      >
                        <SelectTrigger className="w-28">
                          <SelectValue />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="percent">–ü—Ä–æ—Ü–µ–Ω—Ç</SelectItem>
                          <SelectItem value="amount">–°—É–º–º–∞</SelectItem>
                        </SelectContent>
                      </Select>
                      <div className="flex items-center gap-1 flex-1">
                        <Input
                          inputMode="decimal"
                          placeholder={allocationType === 'percent' ? "10" : "5000"}
                          value={allocation?.value || ""}
                          onChange={(e) => handleNumericInput(e.target.value, (val) => handleAllocationChange(index, val, allocationType))}
                          className="text-right"
                          min="0"
                          max={allocationType === 'percent' ? "100" : undefined}
                        />
                        <span className="text-muted-foreground w-8">
                          {allocationType === 'percent' ? '%' : '‚ÇΩ'}
                        </span>
                      </div>
                    </div>
                  </div>
                );
              })}
            </div>
            <div className="flex gap-2 pt-4">
              <Button variant="outline" onClick={() => setStep(4)} className="flex-1">
                –ù–∞–∑–∞–¥
              </Button>
              <Button onClick={handleLinkCategories} disabled={loading} className="flex-1">
                –î–∞–ª–µ–µ
              </Button>
            </div>
          </div>
        )}

        {step === 6 && (
          <div className="space-y-4 text-center py-6">
            <div className="flex justify-center mb-4">
              <CheckCircle2 className="h-16 w-16 text-success" />
            </div>
            <h3 className="text-2xl font-bold">–ì–æ—Ç–æ–≤–æ!</h3>
            <p className="text-muted-foreground">
              –í—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–ª–∏ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–æ—Ö–æ–¥–∞ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤.
              –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ–π –±—é–¥–∂–µ—Ç!
            </p>
            <div className="bg-muted/50 rounded-lg p-4 mt-4 space-y-2 text-sm text-left">
              <p className="font-semibold">–ß—Ç–æ –¥–∞–ª—å—à–µ?</p>
              <ul className="list-disc list-inside space-y-1 text-muted-foreground">
                <li>–î–æ–±–∞–≤–ª—è–π—Ç–µ –¥–æ—Ö–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ</li>
                <li>–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–æ—Ö–æ–¥–∞ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</li>
                <li>–ü–æ–¥–∫–ª—é—á–∏—Ç–µ Telegram –±–æ—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π ü§ñ</li>
                <li>–û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ —Å–≤–æ–π –±–∞–ª–∞–Ω—Å –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É</li>
              </ul>
            </div>
            <Button onClick={handleComplete} className="w-full mt-6">
              –ù–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è
            </Button>
          </div>
        )}
      </DialogContent>
    </Dialog>
  );
}
